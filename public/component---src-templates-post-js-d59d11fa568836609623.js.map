{"version":3,"sources":["webpack:///./src/templates/post.js","webpack:///./node_modules/gatsby-plugin-mdx/index.js","webpack:///./node_modules/gatsby-plugin-mdx/mdx-renderer.js"],"names":["query","PostTemplate","post","data","mdx","frontmatter","title","css","author","body","to","MDXRenderer","require","module","React","useMDXComponents","useMDXScope","scope","components","children","props","mdxComponents","mdxScope","End","fullScope","keys","Object","values","key","fn"],"mappings":"6FAAA,2GAUaA,EAAK,a,+CAsBHC,UATM,SAAC,GAAD,IAAiBC,EAAjB,EAAGC,KAAQC,IAAX,OACjB,YAAC,IAAD,KACI,sBAAKF,EAAKG,YAAYC,OACtB,iBAAGC,IAAG,GAAN,aAA6CL,EAAKG,YAAYG,QAC9D,YAAC,cAAD,KAAcN,EAAKO,MACnB,YAAC,IAAD,CAAUC,GAAG,KAAb,0B,uBCtBR,IAAMC,EAAcC,EAApB,QAEAC,UAAiB,CACfF,YAAaA,I,qrECTf,IAAMG,EAAQF,EAAd,Q,EACkCA,EAAQ,QAAlCG,E,EAAAA,iBAAkBX,E,EAAAA,IAClBY,EAAgBJ,EAAQ,QAAxBI,YAERH,UAAiB,SAAqB,GAKlC,IAJFI,EAIC,EAJDA,MACAC,EAGC,EAHDA,WACAC,EAEC,EAFDA,SACGC,E,oIACF,sCACKC,EAAgBN,EAAtB,GACMO,EAAWN,EAFhB,GAKKO,EAAMT,EAAA,SAAc,WACxB,MACE,OAAO,KAGT,IAAMU,EAAS,GAGbV,MAHa,EAIbV,OAJF,GAQMqB,EAAOC,YAAb,GACMC,EAASF,EAAA,KAAS,SAAAG,GAAG,OAAIJ,EAAJ,MAG3B,OAFQ,mCAAR,KAEOK,2BAAP,OACC,CAACV,EAlBJ,IAoBA,OAAOL,EAAA,mBAA2BI,WAAYG,GAA9C","file":"component---src-templates-post-js-d59d11fa568836609623.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport { css } from '@emotion/core';\nimport  { MDXRenderer } from 'gatsby-plugin-mdx';\nimport Layout from '../components/layout';\nimport ReadLink from '../components/read-link';\n\n// Export GraphQL Query to load particluar post data\n// Able to define a variable name of $slug and set the type to a string. The ! means it's required\n// slug: { eq: $slug } means that the slug variable equals to...\nexport const query = graphql`\n    query ($slug: String!) {\n        mdx(frontmatter: {slug: {eq: $slug}}) {\n            frontmatter {\n                title\n                author\n            }\n            body\n        }\n    }\n`;\n\n// Object Destructuring to change mdx to post\nconst PostTemplate = ({ data: { mdx : post } }) => (\n    <Layout>\n        <h1>{post.frontmatter.title}</h1>\n        <p css={css`font-size: 0.75rem;`}>Posted by {post.frontmatter.author}</p>\n        <MDXRenderer>{post.body}</MDXRenderer>\n        <ReadLink to=\"/\">&larr; back to all posts</ReadLink>\n    </Layout>\n);\n\nexport default PostTemplate;","/**\n * Welcome to gatsby-plugin-mdx!\n *\n * Start reading in gatsby-node.js\n */\n\nconst MDXRenderer = require(`./mdx-renderer`)\n\nmodule.exports = {\n  MDXRenderer: MDXRenderer,\n}\n","const React = require(`react`)\nconst { useMDXComponents, mdx } = require(`@mdx-js/react`)\nconst { useMDXScope } = require(`./context`)\n\nmodule.exports = function MDXRenderer({\n  scope,\n  components,\n  children,\n  ...props\n}) {\n  const mdxComponents = useMDXComponents(components)\n  const mdxScope = useMDXScope(scope)\n\n  // Memoize the compiled component\n  const End = React.useMemo(() => {\n    if (!children) {\n      return null\n    }\n\n    const fullScope = {\n      // React is here just in case the user doesn't pass them in\n      // in a manual usage of the renderer\n      React,\n      mdx,\n      ...mdxScope,\n    }\n\n    const keys = Object.keys(fullScope)\n    const values = keys.map(key => fullScope[key])\n    const fn = new Function(`_fn`, ...keys, `${children}`)\n\n    return fn({}, ...values)\n  }, [children, scope])\n\n  return React.createElement(End, { components: mdxComponents, ...props })\n}\n"],"sourceRoot":""}